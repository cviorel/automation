<#
    .SYNOPSIS
        This script deploys a new DSC web pull server.

    .DESCRIPTION
        Run this script to deploy a Desired State Configuration web pull server that will use a local SQL Server database. After gathering the required parameters, the script will execute the embedded DSC configuration script which will compile a MOF file for the new pull server. The script will then execute the "Start-DscConfiguration" cmdlet to apply the MOF to the pull server.

    .PARAMETER CertificateTemplate
        The name of a valid certificate template. The script will attempt to locate a certificate issued with this template and will use that certificate to secure the DSC web pull service.
        Example: 'Computer Template'
        Required: False
        Type: String
        Parameter Sets: All
        Position: Named
        Default Value: none
        Accept pipeline input: False
        Accept wildcard characters: False

    .PARAMETER RegGUID
        A GUID that will be used for DSC clients to register with the pull server. A registration key GUID only needs to be created once. If a registration key GUID is not provided, the script will create one automatically.
        Example: 'ae53dbe1-c815-4a79-b6b8-fb5d4f3751ee'
        Required: False
        Type: String
        Parameter Sets: All
        Position: Named
        Default Value: none
        Accept pipeline input: False
        Accept wildcard characters: False

    .PARAMETER Port
        A port number to use for the pull server web service. Default value is 8080.
        Example: 8080
        Required: False
        Type: int
        Parameter Sets: All
        Position: Named
        Default Value: 8080
        Accept pipeline input: False
        Accept wildcard characters: False


    .PARAMETER SQLServerName
        The name of the SQL server where the DSC database is hosted.
        Example: 'MySQLServer.corp.com'
        Required: False
        Type: String
        Parameter Sets: All
        Position: Named
        Default Value: none
        Accept pipeline input: False
        Accept wildcard characters: False

    .PARAMETER Path
        Output path for the MOF file generated by the configuration script.
        Example: 'C:\Temp'
        Required: False
        Type: String
        Parameter Sets: All
        Position: Named
        Default Value: "$env:SystemDrive\Temp\PullServerConfig\"
        Accept pipeline input: False
        Accept wildcard characters: False

    .EXAMPLE
        PS C:\> NewDSCPullServer -OutputPath "$env:SystemDrive\Temp\PullServerConfig\" -CertificateThumbprint $thumbprint -RegKey "ae53dbe1-c815-4a79-b6b8-fb5d4f3751ee" -Verbose

        Initiates deployment and configuration of a DSC pull server.

    .INPUTS

    .OUTPUTS

    .NOTES
        Author: Mike

    .LINK
        https://docs.microsoft.com/en-us/powershell/scripting/dsc/pull-server/pullserver?view=powershell-5.1
#>

[cmdletbinding()]
param (
    [parameter(HelpMessage = "The name of a valid certificate template. The script will attempt to locate a certificate issued with this template and will use that certificate to secure the DSC web pull service.")]
    [string]$CertificateTemplate,

    [parameter(HelpMessage = "A GUID that will be used for DSC clients to register with the pull server. A registration key GUID only needs to be created once. If a registration key GUID is not provided, the script will create one automatically.")]
    [string]$RegGUID,

    [parameter(HelpMessage = "A port number to use for the pull server web service. Default value is 8080.")]
    [int]$Port = 8080,

    [parameter(HelpMessage = "The name of the SQL server where the DSC database is hosted.")]
    [string]$SQLServerName,

    [parameter(HelpMessage = "Output path for the MOF file generated by the configuration script.")]
    [string]$Path = "$env:SystemDrive\Temp\PullServerConfig\"
)

$cert = Get-ChildItem -Path "cert:\LocalMachine\My" | ForEach-Object { $_ | Select-Object @{Name = "Template"; Expression = { ($_.Extensions | Where-Object { $_.oid.FriendlyName -match "Certificate Template Information" }).Format(0) -replace "(,+)?=(.+)\((.+)?", '$2' } }, Thumbprint }
$thumbprint = $cert | Where-Object { $_.Template -like "*$($CertificateTemplate)*" } | Select-Object -ExpandProperty Thumbprint
if (!($RegGUID)) {
    $RegGUID = New-Guid | Select-Object -ExpandProperty Guid
}

Configuration NewDSCPullServer {
    <#
    .SYNOPSIS
        DSC configuration for a new DSC web pull server.

    .DESCRIPTION
        This configuration will compile a MOF file that can be used to deploy a new DSC web pille server.

    .PARAMETER NodeName
        The name of the pull server. Defaults to using $env:ComputerName if no value is provided.

    .PARAMETER SQLServer
        The name of the SQL Server where the DSC database is hosted.

    .PARAMETER CertificateThumbprint
        The thumbprint of a valid certificate that will be used to secure the pull server web service.

    .PARAMETER RegKey
        A GUID to use for the DSC client registration key. The script will create one automatically.

    .PARAMETER HTTPPort
        A port number to use for the pull server web service. Default value is 8080.

    .EXAMPLE
        PS C:\> NewDSCPullServer -OutputPath "$env:SystemDrive\Temp\PullServerConfig\" -CertificateThumbprint "EFKJBNS2C3KLJHBIEBC78KJBAICBA" -RegKey (New-Guid | Select-Object -ExpandProperty Guid) -SQLServer "SqlServerName" -Verbose
        This example will execute the DSC configuration script to create a MOF file using the specified parameters.

    .INPUTS

    .OUTPUTS

    .NOTES
        Author: Mike Nickerson

    .LINK
        https://docs.microsoft.com/en-us/powershell/scripting/dsc/pull-server/pullserver?view=powershell-5.1
#>
    param (
        [parameter(HelpMessage = 'The name of the pull server. Defaults to using "$env:ComputerName" if no value is provided.')]
        [string]$NodeName = $env:COMPUTERNAME,

        [parameter(HelpMessage = 'The name of the SQL Server where the DSC database is hosted.')]
        [string]$SQLServer,

        [parameter(HelpMessage = 'The thumbprint of a valid certificate that will be used to secure the pull server web service.')]
        [string]$CertificateThumbprint,

        [parameter(HelpMessage = 'A GUID to use for the DSC client registration key. The script will create one automatically.')]
        [string]$RegKey,

        [parameter(HelpMessage = "A port number to use for the pull server web service.")]
        [int]$HTTPPort
    )

    Import-DscResource -ModuleName 'xPSDesiredStateConfiguration' -ModuleVersion 9.1.0
    Import-DscResource -ModuleName 'NetworkingDsc' -ModuleVersion 7.4.0.0

    Node $NodeName {

        #? 'xWindowsFeature' resource from 'xPSDesiredStateConfiguration' module
        WindowsFeature DSCServiceFeature {
            Ensure = 'Present'
            Name   = 'DSC-Service'
        }

        #? 'xDSCWebService' resource from 'xPSDesiredStateConfiguration' module
        xDSCWebService PSDSCPullServer {
            Ensure                   = 'Present'
            EndpointName             = 'PSDSCPullServer'
            Port                     = $HTTPPort
            CertificateThumbPrint    = $CertificateThumbprint
            PhysicalPath             = "$($env:SystemDrive)\inetpub\wwwroot\PSDSCPullServer"
            ModulePath               = "$($env:PROGRAMFILES)\WindowsPowerShell\DscService\Modules"
            ConfigurationPath        = "$($env:PROGRAMFILES)\WindowsPowerShell\DscService\Configuration"
            State                    = 'Started'
            DependsOn                = '[WindowsFeature]DSCServiceFeature'
            RegistrationKeyPath      = "$($env:PROGRAMFILES)\WindowsPowerShell\DscService"
            UseSecurityBestPractices = $true
            SqlProvider              = $true
            SqlConnectionString      = "Provider=MSOLEDBSQL;Server=$($SQLServer);Database=DSC;Trusted_Connection=yes;"
        }

        File RegistrationKeyFile {
            Ensure          = 'Present'
            Type            = 'File'
            DestinationPath = "$($env:PROGRAMFILES)\WindowsPowerShell\DscService\RegistrationKeys.txt"
            Contents        = $RegKey
        }

        Firewall PSDSCPullServerRule {
            Ensure      = 'Present'
            Name        = "DSC_PullServer_$($HTTPPort)"
            DisplayName = "DSC PullServer $($HTTPPort)"
            Group       = 'DSC PullServer'
            Enabled     = $true
            Action      = 'Allow'
            Direction   = 'InBound'
            LocalPort   = $HTTPPort
            Protocol    = 'TCP'
            Profile     = ('Domain', 'Private')
        }

        Firewall 'Firewall - RemoteDesktop-UserMode-In-TCP' {
            Name    = 'RemoteDesktop-UserMode-In-TCP'
            Ensure  = 'Present'
            Enabled = $true
        }

        Firewall 'Firewall - RemoteDesktop-UserMode-In-UDP' {
            Name    = 'RemoteDesktop-UserMode-In-UDP'
            Ensure  = 'Present'
            Enabled = $true
        }

        Firewall 'Firewall - RemoteEventLogSvc-In-TCP' {
            Name    = 'RemoteEventLogSvc-In-TCP'
            Ensure  = 'Present'
            Enabled = $true
        }

        Firewall 'Firewall - RemoteEventLogSvc-NP-In-TCP' {
            Name    = 'RemoteEventLogSvc-NP-In-TCP'
            Ensure  = 'Present'
            Enabled = $true
        }

        Firewall 'Firewall - RemoteEventLogSvc-RPCSS-In-TCP' {
            Name    = 'RemoteEventLogSvc-RPCSS-In-TCP'
            Ensure  = 'Present'
            Enabled = $true
        }

        Firewall 'Firewall - Allow Configuration Manager Client Notification Inbound' {
            Name      = 'Allow-CM-10123-Inbound'
            Action    = 'Allow'
            Profile   = ('Domain', 'Private')
            Direction = 'Inbound'
            LocalPort = '10123'
            Protocol  = 'TCP'
            Service   = 'CcmExec'
            Ensure    = 'Present'
            Enabled   = $true
        }

        Firewall 'Firewall - Allow Configuration Manager Client Notification Outbound' {
            Name      = 'Allow-CM-10123-Outbound'
            Action    = 'Allow'
            Profile   = ('Domain', 'Private')
            Direction = 'Outbound'
            LocalPort = '10123'
            Protocol  = 'TCP'
            Service   = 'CcmExec'
            Ensure    = 'Present'
            Enabled   = $true
        }

        Firewall 'Firewall - WINRM-HTTP-In-TCP' {
            Name    = 'WINRM-HTTP-In-TCP'
            Ensure  = 'Present'
            Enabled = 'True'
        }

        Firewall 'Firewall - WINRM-HTTPs-In-TCP' {
            Name      = 'WINRM-HTTPs-In-TCP'
            Action    = 'Allow'
            Profile   = ('Domain', 'Private')
            Protocol  = 'TCP'
            LocalPort = '5986'
            Direction = 'Inbound'
            Ensure    = 'Present'
            Enabled   = 'True'
        }

        Firewall 'Firewall - RemoteFwAdmin-In-TCP' {
            Name    = 'RemoteFwAdmin-In-TCP'
            Ensure  = 'Present'
            Enabled = 'True'
        }

        Firewall 'Firewall - WMI-RPCSS-In-TCP' {
            Name    = 'WMI-RPCSS-In-TCP'
            Ensure  = 'Present'
            Enabled = 'True'
        }

        Firewall 'Firewall - WMI-WINMGMT-In-TCP' {
            Name    = 'WMI-WINMGMT-In-TCP'
            Ensure  = 'Present'
            Enabled = 'True'
        }

        Firewall 'Firewall - WMI-ASYNC-In-TCP' {
            Name    = 'WMI-ASYNC-In-TCP'
            Ensure  = 'Present'
            Enabled = 'True'
        }

        Firewall 'Firewall - WMI-WINMGMT-Out-TCP' {
            Name    = 'WMI-WINMGMT-Out-TCP'
            Ensure  = 'Present'
            Enabled = 'True'
        }

        Firewall 'Firewall - FPS-NB_Datagram-In-UDP' {
            Name    = 'FPS-NB_Datagram-In-UDP'
            Ensure  = 'Present'
            Enabled = 'True'
        }

        Firewall 'Firewall - FPS-NB_Datagram-Out-UDP' {
            Name    = 'FPS-NB_Datagram-Out-UDP'
            Ensure  = 'Present'
            Enabled = 'True'
        }

        Firewall 'Firewall - FPS-NB_Name-In-UDP' {
            Name    = 'FPS-NB_Name-In-UDP'
            Ensure  = 'Present'
            Enabled = 'True'
        }

        Firewall 'Firewall - FPS-NB_Name-Out-UDP' {
            Name    = 'FPS-NB_Name-Out-UDP'
            Ensure  = 'Present'
            Enabled = 'True'
        }

        Firewall 'Firewall - FPS-NB_Session-In-TCP' {
            Name    = 'FPS-NB_Session-In-TCP'
            Ensure  = 'Present'
            Enabled = 'True'
        }

        Firewall 'Firewall - FPS-NB_Session-Out-TCP' {
            Name    = 'FPS-NB_Session-Out-TCP'
            Ensure  = 'Present'
            Enabled = 'True'
        }

        Firewall 'Firewall - FPS-RPCSS-In-TCP' {
            Name    = 'FPS-RPCSS-In-TCP'
            Ensure  = 'Present'
            Enabled = 'True'
        }

        Firewall 'Firewall - FPSSMBD-iWARP-In-TCP' {
            Name    = 'FPSSMBD-iWARP-In-TCP'
            Ensure  = 'Present'
            Enabled = 'True'
        }

        Firewall 'Firewall - FPS-SMB-In-TCP' {
            Name    = 'FPS-SMB-In-TCP'
            Ensure  = 'Present'
            Enabled = 'True'
        }

        Firewall 'Firewall - FPS-SMB-Out-TCP' {
            Name    = 'FPS-SMB-Out-TCP'
            Ensure  = 'Present'
            Enabled = 'True'
        }

        Firewall 'Firewall - FPS-ICMP4-ERQ-In' {
            Name    = 'FPS-ICMP4-ERQ-In'
            Ensure  = 'Present'
            Enabled = $true
        }

        Firewall 'Firewall - FPS-ICMP4-ERQ-Out' {
            Name    = 'FPS-ICMP4-ERQ-Out'
            Ensure  = 'Present'
            Enabled = $true
        }

        Firewall 'Firewall - FPS-ICMP6-ERQ-In' {
            Name    = 'FPS-ICMP6-ERQ-In'
            Ensure  = 'Present'
            Enabled = $true
        }

        Firewall 'Firewall - FPS-ICMP6-ERQ-Out' {
            Name    = 'FPS-ICMP6-ERQ-Out'
            Ensure  = 'Present'
            Enabled = $true
        }

    }
}

# Create the Pull Server MOF file
NewDSCPullServer -OutputPath $Path -SQLServer $SQLServerName -CertificateThumbprint $thumbprint -RegKey $RegGUID -HTTPPort $Port -Verbose

# Configure the Pull Server
Start-DscConfiguration -Path $Path -Force -Wait -Verbose

# Configure WinRM for HTTPS
$cert = Get-ChildItem -Path "cert:\LocalMachine\My" | ForEach-Object { $_ | Select-Object @{Name = "Template"; Expression = { ($_.Extensions | Where-Object { $_.oid.FriendlyName -match "Certificate Template Information" }).Format(0) -replace "(,+)?=(.+)\((.+)?", '$2' } }, Thumbprint }
$thumbprint = $cert | Where-Object { $_.Template -like "*Computer*" } | Select-Object -ExpandProperty Thumbprint
try {
    New-WSManInstance -ResourceURI winrm/config/listener -SelectorSet @{Address = "*"; Transport = "HTTPS" } -ValueSet @{Hostname = "$($env:COMPUTERNAME)" + "." + "$($env:USERDNSDOMAIN)"; CertificateThumbprint = "$thumbprint" } | Out-Null
    Set-WSManInstance -ResourceURI winrm/config/client -ValueSet @{TrustedHosts = "*" }
}
catch {
    $_.Exception.Message
}
